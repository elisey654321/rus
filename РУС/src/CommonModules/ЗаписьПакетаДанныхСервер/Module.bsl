
//@skip-check module-structure-method-in-regions
Процедура СозданиеДокументовВФоне(Знач Таблица) экспорт
	//@skip-check module-unused-local-variable
	Перем Счетчик;
	
	Соответствие = Новый Соответствие();
	
	//Получаем дерево соответсвий сначала дата убытия -> способ хранения
	Для Каждого Строка из Таблица цикл
		
		Если Соответствие.Получить(Строка.Получить(0)) = Неопределено тогда
			Соответствие.Вставить(Строка.Получить(0),Новый Соответствие);			
		КонецЕсли;		
		СоответсвиеДат = Соответствие.Получить(Строка.Получить(0));
		
		Если СоответсвиеДат.Получить(Строка.Получить(8)) = Неопределено тогда
			СоответсвиеДат.Вставить(Строка.Получить(8),Новый Массив);
		КонецЕсли;
		
		СоответсвиеДат.Получить(Строка.Получить(8)).Добавить(Строка);
		
	КонецЦикла;
		
	МассивФонЗаданий = Новый Массив;
	
	Попытка
		Для каждого СтрокаСоответствие из Соответствие цикл
			Для каждого СоответсвиеСпособХранения из СтрокаСоответствие.Значение цикл
				нДок = Документы.РасчетУслугСортировки.СоздатьДокумент();
				нДок.УстановитьНовыйНомер();
				нДок.Дата = ПолучитьДатуИзСтрокиCSV(СтрокаСоответствие.Ключ,"00:00:00");
				нДок.ТипГрузовогоМеста = Справочники.ТипыГрузовызРазмещений.НайтиПоНаименованию(СоответсвиеСпособХранения.Ключ);
				нДок.Записать(РежимЗаписиДокумента.Проведение);
				
				Ключ = Новый УникальныйИдентификатор();
				ПараметрыВыполнения = Новый Массив;
				ПараметрыВыполнения.Добавить(СоответсвиеСпособХранения.Значение);
				ПараметрыВыполнения.Добавить(нДок.Ссылка.УникальныйИдентификатор());
				ПараметрыВыполнения.Добавить(СтрокаСоответствие.Ключ);
//				СозданиеДокументовИзПакета(СоответсвиеСпособХранения.Значение,нДок.Ссылка.УникальныйИдентификатор());	
				МассивФонЗаданий.Добавить(ФоновыеЗадания.Выполнить("ЗаписьПакетаДанныхСервер.СозданиеДокументовИзПакета",ПараметрыВыполнения,Ключ));
			КонецЦикла;
		КонецЦикла;
		
		ФоновыеВсеВыполнены = Истина;
		
		Пока ФоновыеВсеВыполнены цикл
			ФоновыеВсеВыполнены = Ложь;
			Для каждого Строка из МассивФонЗаданий цикл
				Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(Строка.УникальныйИдентификатор);
				Если Задание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно тогда
					ВызватьИсключение "Ошибка";
				ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда 
					ФоновыеВсеВыполнены = Истина;
					Задание.ОжидатьЗавершенияВыполнения();					
				КонецЕсли;	
			КонецЦикла;	
		КонецЦикла;		
		
		Для каждого СтрокаСоответствие из Соответствие цикл
			Для каждого СоответсвиеСпособХранения из СтрокаСоответствие.Значение цикл
				Если СоответсвиеСпособХранения.Ключ = "Хаб" тогда
//					РасчитатьСтоимостьОбработкиХаба(СтрокаСоответствие.Ключ);
					ПараметрыВыполнения = Новый Массив;
					ПараметрыВыполнения.Добавить(СтрокаСоответствие.Ключ);
					МассивФонЗаданий.Добавить(ФоновыеЗадания.Выполнить("ЗаписьПакетаДанныхСервер.РасчитатьСтоимостьОбработкиХаба",ПараметрыВыполнения));
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	Исключение
		ЗаписьЖурналаРегистрации("ЗаписьПакетаДанныхСервер",УровеньЖурналаРегистрации.Ошибка);	
	КонецПопытки;	
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункции

Процедура РасчитатьСтоимостьОбработкиХаба(нДата) экспорт
	Дата = ПолучитьДатуИзСтрокиCSV(нДата,"00:00:00");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(СтоимостьРасчетаСортировки.НомерГрузовогоМеста) КАК Количество
	|ПОМЕСТИТЬ ВТ_КолХабов
	|ИЗ
	|	РегистрНакопления.СтоимостьРасчетаСортировки КАК СтоимостьРасчетаСортировки
	|ГДЕ
	|	СтоимостьРасчетаСортировки.ТипГрузовогоМеста = &ТипГрузовогоМеста
	|	И СтоимостьРасчетаСортировки.Услуга = &Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_КолХабов.Количество / &КоличествоДней КАК СреднедневноеКоличество,
	|	ЦеныНаУслугиСрезПоследних.Цена,
	|	ЦеныНаУслугиСрезПоследних.ТипДня
	|ИЗ
	|	ВТ_КолХабов КАК ВТ_КолХабов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНаУслуги.СрезПоследних(&Период, Услуга = &Услуга
	|		И ТипГрузовогоМеста = &ТипГрузовогоМеста) КАК ЦеныНаУслугиСрезПоследних
	|		ПО ВТ_КолХабов.Количество / &КоличествоДней
	|			МЕЖДУ ЦеныНаУслугиСрезПоследних.КоличествоОт И ЦеныНаУслугиСрезПоследних.КоличествоДо
	|		ИЛИ ВТ_КолХабов.Количество / &КоличествоДней > ЦеныНаУслугиСрезПоследних.КоличествоОт
	|		И ЦеныНаУслугиСрезПоследних.КоличествоДо = 0";
	Запрос.УстановитьПараметр("КоличествоДней", День(КонецМесяца(Дата)));
	Запрос.УстановитьПараметр("Услуга", Справочники.Услуги.Обработка);
	Запрос.УстановитьПараметр("ТипГрузовогоМеста", Справочники.ТипыГрузовызРазмещений.Хаб);
	Запрос.УстановитьПараметр("Период", Дата);
	
	Тариф = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СтоимостьРасчетаСортировки.Регистратор
	|ИЗ
	|	РегистрНакопления.СтоимостьРасчетаСортировки КАК СтоимостьРасчетаСортировки
	|ГДЕ
	|	СтоимостьРасчетаСортировки.Регистратор.Дата = &Дата
	|	И СтоимостьРасчетаСортировки.ТипГрузовогоМеста = &ТипГрузовогоМеста";
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ТипГрузовогоМеста", Справочники.ТипыГрузовызРазмещений.Хаб);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() цикл
		Док = Выборка.Регистратор;
		нЗаписи = РегистрыНакопления.СтоимостьРасчетаСортировки.СоздатьНаборЗаписей();
		нЗаписи.Отбор.Регистратор.Установить(Док);
		
		нЗаписи.Прочитать();
		
		Для каждого СтрокаЗапись из нЗаписи цикл
			Если СтрокаЗапись.Услуга = Справочники.Услуги.Обработка тогда
				Отбор = Новый Структура;				
				Если ДеньНедели(Дата) = 6 или ДеньНедели(Дата) = 7 тогда
					Отбор.Вставить("ТипДня",Перечисления.ТипыДней.Выходной);
				Иначе
					Отбор.Вставить("ТипДня",Перечисления.ТипыДней.Рабочий);
				КонецЕсли;
				ВыбранынйТариф = Тариф.НайтиСтроки(Отбор);
				Если ВыбранынйТариф.Количество() > 0 тогда
					СтрокаЗапись.Сумма = ВыбранынйТариф.Получить(0).Цена;
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;	
		нЗаписи.Записать();
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьДатуИзСтрокиCSV(Дата,Время)
	Возврат Дата(Лев(Дата,4),Сред(Дата,6,2),Прав(Дата,2),Лев(Время,2),Сред(Время,4,2),Прав(Время,2));
КонецФункции

Функция ПолучитьТарифыСортировок(Период)
	
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ
	|	ЦеныНаУслугиСрезПоследних.Цена КАК Цена,
	|	ЦеныНаУслугиСрезПоследних.ТипДня КАК ТипДня,
	|	ЦеныНаУслугиСрезПоследних.ТипГрузовогоМеста КАК ТипГрузовогоМеста,
	|	ЦеныНаУслугиСрезПоследних.Услуга КАК Услуга
	|ИЗ
	|	РегистрСведений.ЦеныНаУслуги.СрезПоследних(&Период,
	|		ИСТИНА
	|			И Услуга В (&Услуга)
	|			И ТипГрузовогоМеста В (&ТипГрузовогоМеста)) КАК ЦеныНаУслугиСрезПоследних
	|";
	Запрос.Параметры.Вставить("Период", Период); 
	Услуга = Новый СписокЗначений;
	Услуга.Добавить(Справочники.Услуги.Обработка);
	Услуга.Добавить(Справочники.Услуги.Хранение);
	Запрос.Параметры.Вставить("Услуга", Услуга); 
	ТипГрузовогоМеста = Новый СписокЗначений;
	ТипГрузовогоМеста.Добавить(Справочники.ТипыГрузовызРазмещений.КГТ);
	ТипГрузовогоМеста.Добавить(Справочники.ТипыГрузовызРазмещений.МГТ);
	ТипГрузовогоМеста.Добавить(Справочники.ТипыГрузовызРазмещений.Шины);
	ТипГрузовогоМеста.Добавить(Справочники.ТипыГрузовызРазмещений.Хаб);
	Запрос.Параметры.Вставить("ТипГрузовогоМеста", ТипГрузовогоМеста);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура СозданиеДокументовИзПакета(Массив,УИД_Док,нДата) экспорт
	Если Массив.Количество() > 0 тогда
		РасчетУслугДок = Документы.РасчетУслугСортировки.ПолучитьСсылку(УИД_Док);

		Дата = ПолучитьДатуИзСтрокиCSV(нДата,"00:00:00");

		нЗаписи = РегистрыНакопления.СтоимостьРасчетаСортировки.СоздатьНаборЗаписей();
		нЗаписи.Отбор.Регистратор.Установить(РасчетУслугДок); 
		нЗаписи.Прочитать();
		нЗаписи.Очистить();
		
		Тарифы = ПолучитьТарифыСортировок(Дата);
		
		Для каждого Строка из Массив цикл
			
			нСтр = нЗаписи.Добавить();
			нСтр.НомерГрузовогоМеста = СтрЗаменить(Строка.Получить(2),"""","");
			нСтр.ЗаказКлиента = СтрЗаменить(Строка.Получить(3),"""","");
			нСтр.Дата_Убытие = ПолучитьДатуИзСтрокиCSV(Строка.Получить(0),Строка.Получить(1));
			нСтр.Дата_Прибытие = ПолучитьДатуИзСтрокиCSV(Строка.Получить(6),Строка.Получить(7));
			нСтр.ТипГрузовогоМеста = Справочники.ТипыГрузовызРазмещений.НайтиПоНаименованию(Строка.Получить(8));
			нСтр.Период = ПолучитьДатуИзСтрокиCSV(Строка.Получить(0),"00:00:00");
			нСтр.Услуга = Справочники.Услуги.Хранение;
			нСтр.Регистратор = РасчетУслугДок;
			нСтр.Сумма = ПолучитьЦенуЗаХранение(Тарифы, нСтр);
			
			нСтр = нЗаписи.Добавить();
			нСтр.НомерГрузовогоМеста = СтрЗаменить(Строка.Получить(2),"""","");
			нСтр.ЗаказКлиента = СтрЗаменить(Строка.Получить(3),"""","");
			нСтр.Дата_Убытие = ПолучитьДатуИзСтрокиCSV(Строка.Получить(0),Строка.Получить(1));
			нСтр.Дата_Прибытие = ПолучитьДатуИзСтрокиCSV(Строка.Получить(6),Строка.Получить(7));
			нСтр.ТипГрузовогоМеста = Справочники.ТипыГрузовызРазмещений.НайтиПоНаименованию(Строка.Получить(8));
			нСтр.Период = ПолучитьДатуИзСтрокиCSV(Строка.Получить(0),"00:00:00");
			нСтр.Услуга = Справочники.Услуги.Обработка;
			нСтр.Регистратор = РасчетУслугДок;
			нСтр.Сумма = ПолучитьЦенуЗаОбработку(Тарифы, нСтр);
			
		КонецЦикла;
		нЗаписи.Записать(Истина);
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьЦенуЗаХранение(Тарифы, нСтр)
	Перем ВремяНаСкладе;
	Перем ЦенаЗаСортировку;
	Перем Дата_Убытие;
	Перем ДатаРасчета;
	Перем Отбор;
	ЦенаЗаСортировку = 0;
	

	ВремяНаСкладе = нСтр.Дата_Убытие - нСтр.Дата_Прибытие;
	Если ВремяНаСкладе > 3600*12 тогда
		ДатаРасчета = нСтр.Дата_Прибытие;
		Дата_Убытие = ?(ВремяНаСкладе%3600*24 > 12*3600,нСтр.Дата_Убытие+12*3600,нСтр.Дата_Убытие);
		Пока ДатаРасчета < Дата_Убытие цикл
			Отбор = Новый Структура;
			Отбор.Вставить("ТипГрузовогоМеста",нСтр.ТипГрузовогоМеста);
			Отбор.Вставить("Услуга",Справочники.Услуги.Хранение);
			
			Если ДеньНедели(ДатаРасчета) = 6 или ДеньНедели(ДатаРасчета) = 7 тогда
				Отбор.Вставить("ТипДня",Перечисления.ТипыДней.Выходной);
			Иначе
				Отбор.Вставить("ТипДня",Перечисления.ТипыДней.Рабочий);
			КонецЕсли;
			СтрокиВыбранногоТарифа = Тарифы.НайтиСтроки(Отбор);
			Если СтрокиВыбранногоТарифа.Количество() > 0 тогда
				ЦенаЗаСутки = СтрокиВыбранногоТарифа.Получить(0).Цена;
				ЦенаЗаСортировку = ЦенаЗаСортировку + ЦенаЗаСутки;
			Иначе
				ВызватьИсключение "Не найден тариф!!";
			КонецЕсли;
			ДатаРасчета = ДатаРасчета + 24*3600;	
		КонецЦикла;	
	КонецЕсли;
	
	Возврат ЦенаЗаСортировку;		 

КонецФункции

Функция ПолучитьЦенуЗаОбработку(Тарифы, нСтр)	
	Перем ЦенаЗаСортировку;	
	Перем ЦенаЗаОбработку;	
	Перем СтрокиВыбранногоТарифа;
	Перем Отбор;
	
	ЦенаЗаСортировку = 0;
	
	Если не нСтр.ТипГрузовогоМеста = Справочники.ТипыГрузовызРазмещений.Хаб тогда
				
		Отбор = Новый Структура;
		Отбор.Вставить("ТипГрузовогоМеста",нСтр.ТипГрузовогоМеста);
		Отбор.Вставить("Услуга",Справочники.Услуги.Обработка);
		
		Если ДеньНедели(нСтр.Дата_Убытие) = 6 или ДеньНедели(нСтр.Дата_Убытие) = 7 тогда
			Отбор.Вставить("ТипДня",Перечисления.ТипыДней.Выходной);
		Иначе
			Отбор.Вставить("ТипДня",Перечисления.ТипыДней.Рабочий);
		КонецЕсли;
		
		СтрокиВыбранногоТарифа = Тарифы.НайтиСтроки(Отбор);
		Если СтрокиВыбранногоТарифа.Количество() > 0 тогда
			ЦенаЗаОбработку = СтрокиВыбранногоТарифа.Получить(0).Цена;
			ЦенаЗаСортировку = ЦенаЗаСортировку + ЦенаЗаОбработку;
		Иначе
			ВызватьИсключение "Не найден тариф!!";
		КонецЕсли;
		 
	КонецЕсли;
	
	Возврат ЦенаЗаСортировку;
КонецФункции

#КонецОбласти
